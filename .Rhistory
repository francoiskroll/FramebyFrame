cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
comrow
library(dplyr)
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
frmts
cnts
cells
View(cells)
cells$character_formatted
cells$col
cells$col_outline_level
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
genos
geno_names
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
if(length(comrow)==0)
stop('\t \t \t \t >>> Error: could not find the row where comments start. Please keep a row that says `Comments` in first column. \n')
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
#### clean up ####
# keep only wells
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
# matches genotype number to genotype name
genonames_matched <- c()
for (G in 1:length(genos)) {
geno <- which(frmts==genos[G])
genoname <- unique(cnts[geno])
if (length(genoname) != 1) stop('\t \t \t \t >>> Error: Check the plate map. Probably same Style used for multiple genotypes.
Look for wells: ', genoname, '\n') # checkpoint
genonames_matched <- c(genonames_matched, genoname)
}
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
if(length(comrow)==0)
stop('\t \t \t \t >>> Error: could not find the row where comments start. Please keep a row that says `Comments` in first column. \n')
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
#### clean up ####
# keep only wells
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
# matches genotype number to genotype name
genonames_matched <- c()
for (G in 1:length(genos)) {
geno <- which(frmts==genos[G])
genoname <- unique(cnts[geno])
if (length(genoname) != 1) stop('\t \t \t \t >>> Error: Check the plate map. Probably same Style used for multiple genotypes.
Look for wells: ', paste(genoname, collapse=', '), '\n') # checkpoint
genonames_matched <- c(genonames_matched, genoname)
}
if (setequal(geno_names, genonames_matched) == FALSE) stop('\t \t \t \t >>> Error: Issue with extracting the genotype names. \n') # checkpoint
# what is the genotype with the most number of fish
geno_lgths <- c()
for (G in 1:length(genos)) {
fishes <- sort(which(frmts==genos[G]))
geno_lgths <- c(geno_lgths, length(fishes))
}
maxlgth <- max(geno_lgths)
eachgeno <- matrix(nrow=length(genos), ncol=1) # N in each genotype
for (G in 1:length(genos)){
eachgeno[G,] <- paste('\t genotype', G, '=', genonames_matched[G], ' || N = ', geno_lgths[G])
}
readme_header <- rbind (paste('Experiment: ', experiment_name, sep=''),
paste('Date: ', substr(datebox,1,6), sep=''),
paste('Box: ', substr(datebox, 8, 10), sep=''),
paste('Plate map: ', platemap_name, sep=''),
'',
paste('Total N = ', sum(geno_lgths), ' in ', length(genos), ' genotypes', sep=''),
eachgeno,
'',
paste('Number of empty wells = ', length(which(cnts=='empty')), sep=''),
paste('Number of excluded wells = ', length(which(cnts=='excluded')), sep=''),
'')
pllateMap
plateMap
afterLastSlash(plateMap)
plateMap
afterLastSlash(plateMap)
strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]], 1, 9)
plateMap
plateMap
beforeLastSlash(plateMap)
beforeLastSlash(plateMap)
paste(beforeLastSlash(plateMap))
paste(beforeLastSlash(plateMap), datebox, '_README.txt')
datebox <- substr(strsplit(afterLastSlash(plateMap), split='.xlsx'))[[1]]
datebox <- substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)[[1]]
paste(beforeLastSlash(plateMap), datebox, '_README.txt')
paste0(beforeLastSlash(plateMap), datebox, '_README.txt')
#### build genotype lists ####
Genocols <- vector(mode='list', length=length(genos))
Genotype <- matrix(nrow=maxlgth, ncol=length(genos))
fishcheck <- c()
cat('\n')
for (G in 1:length(genos)) {
fishes <- sort(which(frmts==genos[G]))
message(cat(genos[G], '=', genonames_matched[G], '|| n = ', length(fishes), '|| well ', fishes)) # append to the README file
fishcheck <- c(fishcheck, fishes)
length(fishes) <- maxlgth
Genocols[[G]] <- fishes
Genotype[,G] <- fishes
}
fishcheck <- sort(c(fishcheck, which(frmts=='empty' | frmts=='excluded')))
if (!identical(fishcheck, 1:nwells)) stop('\t \t \t \t >>> Error: Something wrong: not all wells are taken or a well is in multiple genotypes \n') # checkpoint
cat('\n')
cat('Total n =', sum(geno_lgths), '\n')
# say the number of empty wells / excluded wells
cat('Number of empty wells =', length(which(cnts=='empty')), '\n')
cat('Number of excluded wells =', length(which(cnts=='excluded')), '\n')
# Genotype is now a dataframe of `genotypes` columns. Each element = well ID (integer)
# missing headers
# need two header rows: `Genotype1` dummy row and genotype names
# but R does not allow elements in a same column to have different data types
# solution: first create the genotype file, then append the fish IDs to it
header <- rbind(rep('Genotype1', length(genos)), genonames_matched)
rownames(header) <-  NULL
substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)
strsplit(afterLastSlash(plateMap), split='.xlsx')
strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]], 1, 9)
paste0(beforeLastSlash(plateMap), datebox, 'genotype.txt')
source("~/Dropbox/FramebyFrame/R/genotypeGenerator.R")
plateMap
genotypeGenerator(plateMap='~/Dropbox/phd/utilities/YYMMDD_BX_genotypeMap.xlsx')
library(FramebyFrame)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
library(data.table)
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
library(dplyr)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
library(tibble)
library(tidyr)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
## LME stats with three groups
LMEreport(paDir="~/Dropbox/ZFAD/220316_sorl1Stable/bhvparams/",
grporder=c('wt', 'het', 'hom'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
print("Hello World")
print("Hello World")
c(1, 'hey')
pi
NA
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
behaviourParameter(parameter='sleepNumNaps',
ffpath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_RAWsv2.csv',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15_RAWsv2.csv'),
genopath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14genotype.txt',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15genotype.txt'),
zthr_min=1,
dayduration=14)
parameter='sleepNumNaps'
ffpath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_RAWsv2.csv',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15_RAWsv2.csv')
genopath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14genotype.txt',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15genotype.txt')
zthr_min=1
dayduration=14
inaThr=0
woi=NA
# do some checks/tell user ------------------------------------------------
# check parameter name
if (! parameter %in% allparameters) {
print(allparameters)
stop('\t \t \t \t >>> Error behaviourParameter: *', parameter, '* is not one of the supported parameters.\
\t \t \t See available parameters above. \n')
}
# if analysing by woi, cannot calculate activityTransitionDelta
if (!is.na(woi[1]) & parameter=='activityTransitionDelta')
stop('\t \t \t \t >>> Error behaviourParameter: sorry, calculating parameter activityTransitionDelta is not currently supported when analysing window(s) of interest \n')
# check ffpath(s) and genopath(s)
# need one geno file per ff
if(length(genopath) != length(ffpath))
stop('\t \t \t \t >>> Error: the number of ffpaths is not the same as the number of genopaths. Please correct and run again \n')
# remind user how it works with multiple experiments
if (length(ffpath)>1) {
cat('\t \t \t \t >>> Multiple experiments. Will assume that ffpaths and genopaths are in the order in which they are meant to be matched.\n')
}
# check the names match
for (i in 1:length(ffpath)) {
# get date_box of ffpath i
ffdtbx <- substr(afterLastSlash(ffpath[i]), 1, 9)
# get date_box of genopath i
gndtbx <- substr(afterLastSlash(genopath[i]), 1, 9)
# check they are the same
if (!identical(ffdtbx, gndtbx))
stop('\t \t \t \t >>> Error: frame-by-frame file *', afterLastSlash(ffpath[i]),
'* and genotype file *', afterLastSlash(genopath[i]), '* do not have the same date/box number.
\t \t \t Are you sure they are meant to be matched? \n')
}
# import frame-by-frame data ----------------------------------------------
# store them in a list where each slot is one ff
ffL <- vector(mode='list', length=length(ffpath))
for (i in 1:length(ffpath)) {
cat('\n \n \t \t \t \t >>> Reading frame-by-frame data of experiment', substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
ffL[[i]] <- importRAWs(ffpath[i])
}
# split data by day/night or windows of interest (woi) --------------------
# results will be stored as a list of lists
# top level = experiment, bottom level = day/night or woi
# we loop through each experiment and for each we split by day/night or woi, which generates a list
# (lapply would be better here, but not simple when looking for the light transitions file in the folder)
dnL <- vector(mode='list', length=length(ffpath))
# if we are splitting by woi:
if (!is.na(woi[1])) {
cat('\n \n \t \t \t \t >>> Splitting frame-by-frame data by windows of interest for experiment',
substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
dnL[[i]] <- splitFramesbyWoi(tc=ffL[[i]],
woi=woi)
# if not, assume we are splitting by day/night:
} else {
for (i in 1:length(ffL)) {
cat('\n \n \t \t \t \t >>> Splitting frame-by-frame data by day/night for experiment',
substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
dnL[[i]] <- splitFramesbyDayNight(tc=ffL[[i]],
path=ffpath[i])
}
}
# at this stage we can delete ffL to save space
rm(ffL)
# /// to run tests /// ----------------------------------------------------
# to run quick tests, only calculate day1 on one experiment
# ! load only one experiment
# dnL[[1]][c(1, 3, 4, 5)] <- NULL
# i.e. only keep #2 which is day1
# calculate parameter -----------------------------------------------------
# there are three categories of parameters
# 1-- activity parameters
# these are parameters that we can calculate directly on the frame-by-frame deltapx values without any transformation
# the name of the parameter starts with activity
# 2-- active bout parameters
# these are parameters which require us to detect individual swimming bouts
# the name of the parameter starts with activebout
# 3-- sleep parameters
# these are parameters which require us to detect individual sleep bouts (aka naps)
# the name of the parameter starts with sleep
# there is one overarching function for each category
# which then calls the _onefish version to calculate that specific parameter
# which overarching function we call depends on the parameter's category (see above)
# then lapply will loop through experiments in `dnL` and call the parameter function on one `dn` at a time
# result will be a list, one slot per experiment
# each slot is a simple parameter dataframe `pa` where rows = fish, column = day/night
# category1
if(substr(parameter, 1, 8) == 'activity') {
cat('\n \t \t \t \t >>> ACTIVITY parameter \n')
paL <- lapply(dnL, activityParameter, parameter=parameter, dayduration=dayduration)
}
# category2
if(substr(parameter, 1, 10) == 'activebout') {
cat('\n \t \t \t \t >>> ACTIVE BOUT parameter \n')
paL <- lapply(dnL, activeboutParameter, parameter=parameter)
}
dnL
str(dnL)
head(dnL)
names(dnL)
ffpath
afterLastSlash(substr(ffpath), 1, 9)
afterLastSlash(substr(ffpath), 1, 9)
afterLastSlash(substr(ffpath, 1, 9))
afterLastSlash(substr(ffpath[1]), 1, 9)
ffpath
ffpath[1]
substr(ffpath[1], 1, 9)
afterLastSlash(ffpath[1])
substr(afterLastSlash(ffpath[1]), 1, 9)
substr(afterLastSlash(ffpath), 1, 9)
# do some checks/tell user ------------------------------------------------
# check parameter name
if (! parameter %in% allparameters) {
print(allparameters)
stop('\t \t \t \t >>> Error behaviourParameter: *', parameter, '* is not one of the supported parameters.\
\t \t \t See available parameters above. \n')
}
# if analysing by woi, cannot calculate activityTransitionDelta
if (!is.na(woi[1]) & parameter=='activityTransitionDelta')
stop('\t \t \t \t >>> Error behaviourParameter: sorry, calculating parameter activityTransitionDelta is not currently supported when analysing window(s) of interest \n')
# check ffpath(s) and genopath(s)
# need one geno file per ff
if(length(genopath) != length(ffpath))
stop('\t \t \t \t >>> Error: the number of ffpaths is not the same as the number of genopaths. Please correct and run again \n')
# remind user how it works with multiple experiments
if (length(ffpath)>1) {
cat('\t \t \t \t >>> Multiple experiments. Will assume that ffpaths and genopaths are in the order in which they are meant to be matched.\n')
}
# check the names match
for (i in 1:length(ffpath)) {
# get date_box of ffpath i
ffdtbx <- substr(afterLastSlash(ffpath[i]), 1, 9)
# get date_box of genopath i
gndtbx <- substr(afterLastSlash(genopath[i]), 1, 9)
# check they are the same
if (!identical(ffdtbx, gndtbx))
stop('\t \t \t \t >>> Error: frame-by-frame file *', afterLastSlash(ffpath[i]),
'* and genotype file *', afterLastSlash(genopath[i]), '* do not have the same date/box number.
\t \t \t Are you sure they are meant to be matched? \n')
}
# import frame-by-frame data ----------------------------------------------
# store them in a list where each slot is one ff
ffL <- vector(mode='list', length=length(ffpath))
for (i in 1:length(ffpath)) {
cat('\n \n \t \t \t \t >>> Reading frame-by-frame data of experiment', substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
ffL[[i]] <- importRAWs(ffpath[i])
}
# split data by day/night or windows of interest (woi) --------------------
# results will be stored as a list of lists
# top level = experiment, bottom level = day/night or woi
# we loop through each experiment and for each we split by day/night or woi, which generates a list
# (lapply would be better here, but not simple when looking for the light transitions file in the folder)
dnL <- vector(mode='list', length=length(ffpath))
# if we are splitting by woi:
if (!is.na(woi[1])) {
cat('\n \n \t \t \t \t >>> Splitting frame-by-frame data by windows of interest for experiment',
substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
dnL[[i]] <- splitFramesbyWoi(tc=ffL[[i]],
woi=woi)
# if not, assume we are splitting by day/night:
} else {
for (i in 1:length(ffL)) {
cat('\n \n \t \t \t \t >>> Splitting frame-by-frame data by day/night for experiment',
substr(afterLastSlash(ffpath[i]), 1, 9), '\n')
dnL[[i]] <- splitFramesbyDayNight(tc=ffL[[i]],
path=ffpath[i])
}
# either way, at the top level each element of the list is an experiment
# so we will put name as YYMMDD_BX
# which we can obtain from ffpath
names(dnL) <- substr(afterLastSlash(ffpath), 1, 9)
}
# at this stage we can delete ffL to save space
rm(ffL)
dnL
dnL[[1]]
names(dnL[[1]])
dnL[[1]]
devtools::load_all(".")
behaviourParameter(parameter='sleepNumNaps',
ffpath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_RAWsv2.csv',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15_RAWsv2.csv'),
genopath=c('~/Dropbox/ZFAD/220316_sorl1Stable/220316_14genotype.txt',
'~/Dropbox/ZFAD/220316_sorl1Stable/220316_15genotype.txt'),
zthr_min=1,
dayduration=14)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
c('.XLS', '.XLS')
tmp <- c('.XLS', '.XLS')
all(substrEnding(xlsnames, 4)!='.xls')
all(tmp!='.xls')
all(tmp!='.xls' | tmp!='.XLS')
tmp
all(tmp!=('.xls'|'.XLS'))
# quick check: we should not have anything else than .xls or .XLS files in there -- check this
if(all(substrEnding(xlsnames, 4)!='.xls'))
stop('\t \t \t \t >>> Error: there is something else than just .xls files in this folder, check and run again \n')
library(FramebyFrame)
# quick check: we should not have anything else than .xls or .XLS files in there -- check this
if(all(substrEnding(xlsnames, 4)!='.xls'))
stop('\t \t \t \t >>> Error: there is something else than just .xls files in this folder, check and run again \n')
