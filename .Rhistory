# can be to split well ID and group it belongs to
# e.g. f189_scr_1107_mesh >>> scr_1107_mesh
afterFirstUnderscore <- function(stri) {
as.character(sapply(stri, function(st){
substr(st,
which(strsplit(st, '')[[1]] == '_') [1] + 1,
nchar(st))
}))
}
# splitStrTakeNth ---------------------------------------------------------
# split string(s) and take the nth element of each
# e.g. strNthSplit on day1_sunny_23C and day2_rainy_20C
# with split = '_' and nth = 2
# gives sunny, rainy
#' Title
#'
#' @param stri
#' @param split
#' @param nth
#'
#' @return
#' @export
#'
#' @examples
strNthSplit <- function(stri,
split,
nth) {
# confirm we are given string(s)
stri <- as.character(unlist(stri))
as.character(sapply(strsplit(stri, split=split),
function(s) {
s[nth]
}))
}
# startsWith --------------------------------------------------------------
#' Title
#'
#' @param stri
#' @param match
#'
#' @return
#' @export
#'
#' @examples
startsWith <- function(stri,
match) {
as.logical(sapply(stri,
function(s) {
substr(s, 1, nchar(match)) == match
}))
}
# levelUpPath -------------------------------------------------------------
# e.g. upn = 3 on "/Users/francoiskroll/Dropbox/ZFAD/f0subsample/sorl1_f0sub/iter3/plots/iter3LME.csv"
# will give iter3
# idea is to go 'up' (i.e. to parent folder) in a path and return that component
#' Title
#'
#' @param paths
#' @param upn
#' @param slash
#'
#' @return
#' @export
#'
#' @examples
levelUpPath <- function(paths,
upn,
slash='/') {
cpns <- as.character(sapply( paths, function(pth) {
rev(unlist(strsplit(pth, slash)))[upn]
} ))
# cpns for components
return(cpns)
}
# parentFolder ------------------------------------------------------------
# similar as levelUpPath but gives the whole path of the parent folder, or the 'grandparent' folder, etc.
# upn is for up n-times
# e.g. upn = 3 on "/Users/francoiskroll/Dropbox/ZFAD/f0subsample/sorl1_f0sub/iter3/plots/iter3LME.csv"
# will give /Users/francoiskroll/Dropbox/ZFAD/f0subsample/sorl1_f0sub/
# by default upn=1, i.e. it just goes up one folder
#' Title
#'
#' @param paths
#' @param upn
#' @param slash
#'
#' @return
#' @export
#'
#' @examples
parentFolder <- function(paths,
upn=1,
slash='/') {
# for each path we are given,
as.character(sapply(paths, function(pth) {
# split the path into its components
cpns <- unlist(strsplit(pth, slash))
# remove the last n components
cpns <- cpns[1:(length(cpns)-upn)]
# paste everything back into a path
return(paste(cpns, collapse=slash))
}))
}
# gatherFiles -------------------------------------------------------------
# function to gather files from multiple folders recursively
# eg. folder 1 contains file A and B; folder 2 contains file C and D
# >> gathers files A, B, C, D in one folder
# will copy (not move) files to the output folder for safety
### explanations ###
# gatherFiles(parent, output)
# parent = folder which contains many subfolders, and you want all the files in the subfolders to be gathered in one folder
# output = where you want all the files gathered
# ! not tested when some files have the same names, they will probably overwrite each other
### example usage ###
# path to parent folder
# i.e. folder containing the folders to merge
# par <- '~/Dropbox/phd/october2021_MiSeq/oct2021MiSeq_alldata/PayneMiseqOct21-295623328/'
# output folder
# where will drop all the files
# can exist already or not; will create it if does not exist already
# (will throw a Warning if exists already but can be ignored)
# out <- '~/Dropbox/phd/october2021_MiSeq/data/'
# launch gatherFiles():
# gatherFiles(parent = par, output = out)
#### function ###
#' Title
#'
#' @param parent
#' @param output
#'
#' @return
#' @export
#'
#' @examples
gatherFiles <- function(parent, output) {
allfi <- list.files(parent,
recursive=TRUE,
full.names=TRUE) # all paths + files to gather
dir.create(output, showWarnings=FALSE)
sapply(1:length(allfi),
function(f) {
cat('\t \t \t \t >>> Moving file', f, 'out of', length(allfi), '\n')
file.copy(from=allfi[f], to=paste0(output, afterLastSlash(allfi[f])))
# invisible just prevents it from returning TRUE each time it moved one file
})
}
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWsadjusted.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_13_RAWsadjusted.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
###
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_13_PSEN1.xls',
dayduration=14)
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210913_PSEN1/210913_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_13_PSEN1.xls',
dayduration=14)
###
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210927_APPA/210927_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210927_APPA/210927_12_13_APPA.xls',
dayduration=14)
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/210927_APPA/210927_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210927_APPA/210927_12_13_APPA.xls',
dayduration=14)
###
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/220313_APOEAB_2/220313_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220313_APOEAB_2/220313_14_15_apoeab.xls',
dayduration=14)
###
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_15_sorl1Stable.xls',
dayduration=14)
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_15_sorl1Stable.xls',
dayduration=14)
###
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_15_apoeab.xls',
dayduration=14)
importAddTimetoRAWs(ffpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_15_apoeab.xls',
dayduration=14)
###
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWs.csv'
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls'
dayduration=14
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importRAWs.R")
# check we are given a ffpath that makes sense
if(substrEnding(ffpath, 4) != '.csv')
stop('\t \t \t \t >>> Error: did you pick the correct file? It is not .csv \n')
source("~/Dropbox/FramebyFrame/R/pathUtilities.R")
# check we are given a ffpath that makes sense
if(substrEnding(ffpath, 4) != '.csv')
stop('\t \t \t \t >>> Error: did you pick the correct file? It is not .csv \n')
# proceed with importing RAWs.csv
cat('\t \t \t \t >>> Importing frame-by-frame data... \n')
ff <- data.table::fread(ffpath)
# Vp_Sorter script wrote first column as `time`, which was a bad idea
# it creates conflicts later with a function called time
colnames(ff)[1] <- 'exsecs' # number of seconds after experiment started
# detect number of wells on the plate
# look at name of last column in ff
nwells <- readr::parse_number(colnames(ff)[ncol(ff)])
# if that number is above 97, we are looking at box2 data
# so subtract 96 from the number
if (nwells > 96) {nwells <- nwells - 96}
cat('\t \t \t \t >>> Detected *', nwells,'* -wells plate \n')
# check format looks correct
# detect number
if(ncol(ff)!=nwells+1) stop('\t \t \t \t >>> Error: why _RAWs.csv file does not have number of wells + 1 columns? \n')
# calculate frame-rate ----------------------------------------------------
fps <- averageFramerate(ff$exsecs)
cat('\t \t \t \t >>> Experiment lasted ***', round(nrow(ff)/fps/60/60,0), '*** hours \n')
# -------------------------------------------------------------------------
# for timepoints: will add both full timestamps (best estimate) + zth (i.e. number of hours since day0 9AM)
# will also output light transitions in frame # (row #), as Vp_Extract.m
# will follow same logic as Vp_Extract.m to find transitions, i.e. find closest frame (in zth) to 14, 24, etc.
# import first row of Zebralab file ---------------------------------------
# the Zebralab XLS file has a different encoding whether it is from the older or newer version of the Zebralab software
# and the encoding decides which import function we should use
# I cannot find a solution to tell the encoding in advance,
# so previously each command was asking whether zebDeprecatedFormat was TRUE or FALSE
# a better solution to avoid bothering the user is simply to try one import command, and switch to the other if it does not work:
usefRead <- TRUE # by default use fread
# except if fread does not work
tryCatch( { result <- data.table::fread(zebpath) },
error = function(e) {usefRead <<- FALSE},
silent=TRUE)
# read first row of Zebralab's XLS file
if (usefRead) {
zebfi <- data.table::fread(zebpath)[1,]
} else {
zebfi <- read.delim(zebpath, fileEncoding='UCS-2LE', header=TRUE, nrow=1)
}
# zebfi = ZebraLab XLS file's first row
# get t0 full timestamp ---------------------------------------------------
startts <- paste(zebfi$stdate, zebfi$sttime) # start timestamp, e.g. 28/01/2021 10:27:35
# ! assumes first timestamp is correct. ViewPoint have made serious errors about this; carefully check
# especially if Replay; first timestamp is stupidly taken from the computer clock when you start the Replay, not from the raw file
startts <- lubridate::dmy_hms(startts) # convert in lubridate format eg. 2021-01-28 10:27:35 UTC
# add full timestamps to frame-by-frame data ------------------------------
# will now assume first frame timestamp in RAW csv is = first timestamp in ZebraLab XLS file
# and write all the frame timestamps as full date/time eg. 2021-01-28 10:27:35 UTC
ff <- ff %>%
add_column(fullts = startts + lubridate::dseconds(ff$exsecs) , .before='exsecs') # add full timestamp column
library(dplyr)
library(tibble)
# check we are given a ffpath that makes sense
if(substrEnding(ffpath, 4) != '.csv')
stop('\t \t \t \t >>> Error: did you pick the correct file? It is not .csv \n')
# proceed with importing RAWs.csv
cat('\t \t \t \t >>> Importing frame-by-frame data... \n')
ff <- data.table::fread(ffpath)
# Vp_Sorter script wrote first column as `time`, which was a bad idea
# it creates conflicts later with a function called time
colnames(ff)[1] <- 'exsecs' # number of seconds after experiment started
# detect number of wells on the plate
# look at name of last column in ff
nwells <- readr::parse_number(colnames(ff)[ncol(ff)])
# if that number is above 97, we are looking at box2 data
# so subtract 96 from the number
if (nwells > 96) {nwells <- nwells - 96}
cat('\t \t \t \t >>> Detected *', nwells,'* -wells plate \n')
# check format looks correct
# detect number
if(ncol(ff)!=nwells+1) stop('\t \t \t \t >>> Error: why _RAWs.csv file does not have number of wells + 1 columns? \n')
# calculate frame-rate ----------------------------------------------------
fps <- averageFramerate(ff$exsecs)
cat('\t \t \t \t >>> Experiment lasted ***', round(nrow(ff)/fps/60/60,0), '*** hours \n')
# -------------------------------------------------------------------------
# for timepoints: will add both full timestamps (best estimate) + zth (i.e. number of hours since day0 9AM)
# will also output light transitions in frame # (row #), as Vp_Extract.m
# will follow same logic as Vp_Extract.m to find transitions, i.e. find closest frame (in zth) to 14, 24, etc.
# import first row of Zebralab file ---------------------------------------
# the Zebralab XLS file has a different encoding whether it is from the older or newer version of the Zebralab software
# and the encoding decides which import function we should use
# I cannot find a solution to tell the encoding in advance,
# so previously each command was asking whether zebDeprecatedFormat was TRUE or FALSE
# a better solution to avoid bothering the user is simply to try one import command, and switch to the other if it does not work:
usefRead <- TRUE # by default use fread
# except if fread does not work
tryCatch( { result <- data.table::fread(zebpath) },
error = function(e) {usefRead <<- FALSE},
silent=TRUE)
# read first row of Zebralab's XLS file
if (usefRead) {
zebfi <- data.table::fread(zebpath)[1,]
} else {
zebfi <- read.delim(zebpath, fileEncoding='UCS-2LE', header=TRUE, nrow=1)
}
# zebfi = ZebraLab XLS file's first row
# get t0 full timestamp ---------------------------------------------------
startts <- paste(zebfi$stdate, zebfi$sttime) # start timestamp, e.g. 28/01/2021 10:27:35
# ! assumes first timestamp is correct. ViewPoint have made serious errors about this; carefully check
# especially if Replay; first timestamp is stupidly taken from the computer clock when you start the Replay, not from the raw file
startts <- lubridate::dmy_hms(startts) # convert in lubridate format eg. 2021-01-28 10:27:35 UTC
# add full timestamps to frame-by-frame data ------------------------------
# will now assume first frame timestamp in RAW csv is = first timestamp in ZebraLab XLS file
# and write all the frame timestamps as full date/time eg. 2021-01-28 10:27:35 UTC
ff <- ff %>%
add_column(fullts = startts + lubridate::dseconds(ff$exsecs) , .before='exsecs') # add full timestamp column
# takes first timestamp then add to it any number of seconds written in the frame-by-frame data
# e.g. at 3000th frame, 2021-03-16 19:54:49 + 120 seconds = 2021-03-16 19:56:49
# add Zeitgeber durations -------------------------------------------------
# i.e. number of hours since first day0 9AM
startdate <- lubridate::date(ff$fullts[1]) # get startdate of the experiment = date of the first timepoint
ff <- ff %>%
add_column(zhrs = as.numeric(difftime(ff$fullts, lubridate::ymd_hms(paste(startdate, '09:00:00')), units='hours')),
.before='exsecs')
# zeitgeber is time difference in hours since first 9AM
# tell user about timestamps so can check they look correct
cat('\t \t \t \t >>> First timestamp is ***', as.character(ff$fullts[1]), '*** \n')
cat('\t \t \t \t >>> Last timestamp is ***', as.character(ff$fullts[nrow(ff)]), '*** \n \n')
# find light transitions --------------------------------------------------
# sunsets and sunrises times (in number of hours since day0 sunrise at 9AM) for 10 days
suns <- c(rbind(seq(dayduration, 720, 24), seq(24, 720, 24)))
# typically dayduration = 14
# so will go 14, 24, 38, 48 etc.
# take only the ones we will find in the data
# round down last timepoint (indeed, if e.g. experiment stops at 71.9 hours, there is no 72 hours sunrise)
lastz <- floor(max(ff$zhrs))
# experiment should always start between 0+ and before 14 so should not matter how we round start
firstz <- floor(min(ff$zhrs))
suns <- intersect(suns, firstz:lastz) # will give the sunsets/sunrises we expect to encounter in the data
# find the transition frames
# using function findLightTransitionFrame(...) from above
if (length(suns) != 0) { # if no light transition (e.g. experiment lasted just a few hours), should skip this step
# preallocate small dataframe transition number / sunset or sunrise / frame # / full timestamp / Zeitgeber duration / seconds of experiment
ltcolnms <- c('transition_num', 'sunset_or_sunrise', 'frame', 'full_timestamp', 'zhrs', 'exsecs') # light transitions column names
lt <- as.data.frame(matrix(nrow=length(suns), ncol=length(ltcolnms))) # lt for light transitions
colnames(lt) <- ltcolnms
lt$full_timestamp <- lubridate::ymd_hms(NA)
for (s in 1:length(suns)) {
# fill in transition number
lt[s, 'transition_num'] <- s
# fill in sunset or sunrise
# if index in suns is even (2, 4, ...): sunrise; if index in suns is odd (1, 3, ...): sunset
if (s %% 2 == 0) {
lt[s, 'sunset_or_sunrise'] <- 'sunrise'
} else if (s %% 2 != 0) {
lt[s, 'sunset_or_sunrise'] <- 'sunset'
}
# find frame number of transition
tfra <- findLightTransitionFrame(ff$zhrs, round(suns[s])) # transition frame
# fill it in
lt[s, 'frame'] <- tfra
# fill in full timestamp
lt[s, 'full_timestamp'] <- ff[tfra, 'fullts']
# fill in Zeitgeber duration
lt[s, 'zhrs'] <- ff[tfra, 'zhrs']
# fill in number of seconds since start of the experiment
lt[s, 'exsecs'] <- ff[tfra, 'exsecs']
# give a quick check to user
cat('\t \t \t \t >>> Light transition #', s,
': ', toupper(lt[s, 'sunset_or_sunrise']), ' at frame ', tfra,
', clock = ', as.character(lt[s, 'full_timestamp']),
', Zeitgeber duration = ', lt[s, 'zhrs'], '\n',
sep='')
}
# write light transitions
outpath <- paste0(beforeLastSlash(ffpath), beforeLastUnderscore(afterLastSlash(ffpath)), '_lights.csv')
data.table::fwrite(lt, file=outpath)
} # closes if suns is not length 0
ffpath
strsplit(ffpath, split='.csv')
strsplit(ffpath, split='.csv')[[1]]
paste0(strsplit(ffpath, split='.csv')[[1]], 't.csv')
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWsadjusted.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
# done up to here ---------------------------------------------------------
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_RAWsadjusted.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210907_PSEN2/210907_13_RAWsadjusted.csv',
zebpath='~/Dropbox/ZFAD/210907_PSEN2/210907_12_13_PSEN2.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_13_PSEN1.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210913_PSEN1/210913_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210913_PSEN1/210913_12_13_PSEN1.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210927_APPA/210927_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210927_APPA/210927_12_13_APPA.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/210927_APPA/210927_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/210927_APPA/210927_12_13_APPA.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220313_APOEAB_2/220313_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220313_APOEAB_2/220313_14_15_apoeab.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_15_sorl1Stable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220316_sorl1Stable/220316_14_15_sorl1Stable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_15_apoeab.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220516_APOEAB_3/220516_14_15_apoeab.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220524_APPAB/220524_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220524_APPAB/220524_14_15_appab.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220524_APPAB/220524_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220524_APPAB/220524_14_15_appab.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_apoeabStable_1/220531_10_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_apoeabStable_1/220531_10_11_apoeabStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_apoeabStable_1/220531_11_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_apoeabStable_1/220531_10_11_apoeabStable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_cd2apStable/220531_12_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_cd2apStable/220531_12_13_cd2apStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_cd2apStable/220531_13_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_cd2apStable/220531_12_13_cd2apStable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_15_sorl1.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_15_sorl1.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220601_CLU/220601_16_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220601_CLU/220601_16_17_clu.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220601_CLU/220601_17_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220601_CLU/220601_17_RAWs.csv',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220601_CLU/220601_17_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220601_CLU/220601_16_17_clu.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220706_apoeabStable_2/220706_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220706_apoeabStable_2/220706_14_15_apoeabStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220706_apoeabStable_2/220706_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220706_apoeabStable_2/220706_14_15_apoeabStable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220706_apoeabStable_3/220706_16_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220706_apoeabStable_3/220706_16_17_apoeabStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220706_apoeabStable_3/220706_17_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220706_apoeabStable_3/220706_16_17_apoeabStable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220725_CD2AP/220725_16_RAWsapp.csv',
zebpath='~/Dropbox/ZFAD/220725_CD2AP/220725_16_17_CD2AP_part1.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220725_CD2AP/220725_17_RAWsapp.csv',
zebpath='~/Dropbox/ZFAD/220725_CD2AP/220725_16_17_CD2AP_part1.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220906_cluStable_1/220906_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220906_cluStable_1/220906_14_15_cluStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220906_cluStable_1/220906_15_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220906_cluStable_1/220906_14_15_cluStable.xls',
dayduration=14)
###
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220906_cluStable_2/220906_16_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220906_cluStable_2/220906_16_17_cluStable.xls',
dayduration=14)
addTimetoRAWs(ffpath='~/Dropbox/ZFAD/220906_cluStable_2/220906_17_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220906_cluStable_2/220906_16_17_cluStable.xls',
dayduration=14)
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
source("~/Dropbox/FramebyFrame/R/importAddTimetoRAWs.R")
