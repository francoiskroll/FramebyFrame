# so build name of object from ffpath
ffnm <- afterLastSlash(ffpath) # everything after last slash of path, should give something like 210927_14_RAWs.csv
ffnm
# for the object's name, we want to get to dnz_YYMMDD_BX
dnzname <- paste0('dnz_', substr(ffnm, 1, 9))
dnzname
ggFramerate(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_15_sorl1.xls',
subsample=TRUE,
subsample_by=1000,
xstart=0,
xstop=0,
ymin=0,
ymax=50,
sunlines=FALSE,
dayduration=14,
xname='hours since first 9 AM',
yname='frames-per-second',
exportOrNo=TRUE,
width=75,
height=55,
exportPath='~/Dropbox/ZFAD/plots/test.pdf')
devtools::load_all(".")
devtools::load_all(".")
ggFramerate(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWs.csv',
zebpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_15_sorl1.xls',
subsample=TRUE,
subsample_by=1000,
xstart=0,
xstop=0,
ymin=0,
ymax=50,
sunlines=FALSE,
dayduration=14,
xname='hours since first 9 AM',
yname='frames-per-second',
exportOrNo=TRUE,
width=75,
height=55,
exportPath='~/Dropbox/ZFAD/plots/test.pdf')
ggFramerate(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
subsample=TRUE,
subsample_by=1000,
xstart=0,
xstop=0,
ymin=0,
ymax=50,
sunlines=FALSE,
xname='hours since first 9 AM',
yname='frames-per-second',
exportOrNo=TRUE,
width=75,
height=55,
exportPath='~/Dropbox/ZFAD/plots/test.pdf')
devtools::load_all(".")
ggFramerate(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
subsample=TRUE,
subsample_by=1000,
xstart=0,
xstop=0,
ymin=0,
ymax=50,
sunlines=FALSE,
xname='hours since first 9 AM',
yname='frames-per-second',
exportOrNo=TRUE,
width=75,
height=55,
exportPath='~/Dropbox/ZFAD/plots/test.pdf')
ggActivityTraceByGroup(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
smoothOrNo=TRUE,
smooth_nsecs=30*60,
binOrNo=TRUE,
bin_nsecs=10*60,
ribbon='sem',
grporder=c('sorl1', 'scr'),
tracecols=c('#78ac63', '#697a87'),
ribboncols=c('#bbd4ae', '#b3bcc3'),
linethick=0.4,
xname='',
yname='',
xtextOrNo=FALSE,
ytextOrNo=TRUE,
ymin=0,
ymax=40000,
xstart=0,
xstop=0,
trimstart=0,
trimstop=0,
xmajorOrNo=FALSE,
ymajorOrNo=TRUE,
sunlinesOrNo=FALSE,
nightBgOrNo=FALSE,
legendOrNo=FALSE,
exportOrNo=TRUE,
exportPath='~/Dropbox/ZFAD/plots/test.pdf',
width=75,
height=55)
ggActivityTraceByGroup(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
smoothOrNo=TRUE,
smooth_nsecs=30*60,
binOrNo=TRUE,
bin_nsecs=10*60,
ribbon='sem',
grporder=c('sorl1', 'scr'),
tracecols=c('#78ac63', '#697a87'),
ribboncols=c('#bbd4ae', '#b3bcc3'),
linethick=0.4,
xname='',
yname='',
xtextOrNo=FALSE,
ytextOrNo=TRUE,
ymin=0,
ymax=40000,
xstart=0,
xstop=0,
trimstart=0,
trimstop=0,
xmajorOrNo=FALSE,
ymajorOrNo=TRUE,
sunlinesOrNo=FALSE,
nightBgOrNo=FALSE,
legendOrNo=FALSE,
exportOrNo=TRUE,
exportPath='~/Dropbox/ZFAD/plots/test.pdf',
width=75,
height=55)
ggActivityTraceByGroup(ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
smoothOrNo=TRUE,
smooth_nsecs=30*60,
binOrNo=TRUE,
bin_nsecs=10*60,
ribbon='sem',
grporder=c('sorl1', 'scr'),
tracecols=c('#78ac63', '#697a87'),
ribboncols=c('#bbd4ae', '#b3bcc3'),
linethick=0.4,
xname='',
yname='',
xtextOrNo=FALSE,
ytextOrNo=TRUE,
ymin=0,
ymax=40000,
xstart=0,
xstop=0,
trimstart=0,
trimstop=0,
xmajorOrNo=FALSE,
ymajorOrNo=TRUE,
sunlinesOrNo=FALSE,
nightBgOrNo=FALSE,
legendOrNo=FALSE,
exportOrNo=TRUE,
exportPath='~/Dropbox/ZFAD/plots/test.pdf',
width=75,
height=55)
multiBehaviourParameter(parameter='activity',
ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
zthr_min=1)
multiBehaviourParameter(parameter='activityTransitionDelta',
ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
zthr_min=1,
dayduration=14)
devtools::load_all(".")
multiBehaviourParameter(parameter='activityTransitionDelta',
ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
zthr_min=1,
dayduration=14)
multiBehaviourParameter(parameter='activitySlope',
ffpath='~/Dropbox/ZFAD/220531_SORL1/220531_14_RAWsv2.csv',
genopath='~/Dropbox/ZFAD/220531_SORL1/220531_14genotype.txt',
zthr_min=1,
dayduration=14)
ggParameterGrid(paDir='~/Dropbox/ZFAD/220531_SORL1/bhvparams/',
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
poolDayNight=FALSE,
onlyExp=NA,
onlyDayorNight=NA,
onlyWin=NA,
colours=c('#78ac63', '#697a87'),
ymin=NA,
ymax=NA,
legendOrNo=FALSE,
ynameOrNo=FALSE,
yunitOrNo=TRUE,
xtextOrNo=FALSE,
titleOrNo=TRUE,
nightBgOrNo=TRUE,
statsOrNo=TRUE,
ncol=5,
nrow=4,
width=500,
height=230,
exportPath='~/Dropbox/ZFAD/plots/test.pdf')
warnings()
use_r('genotypeGenerator')
library(devtools)
use_r('genotypeGenerator')
plateMap <- '~/Dropbox/phd/utilities/YYMMDD_BX_genotypeMap.xlsx'
plateMap
substr(afterLastSlash(plateMap), 1, 9)
path
plateMap
use_package('tidyxl')
tidyxl::xlsx_cell(plateMap)
tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
comrow
library(dplyr)
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
frmts
cnts
cells
View(cells)
cells$character_formatted
cells$col
cells$col_outline_level
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
genos
geno_names
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
if(length(comrow)==0)
stop('\t \t \t \t >>> Error: could not find the row where comments start. Please keep a row that says `Comments` in first column. \n')
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
#### clean up ####
# keep only wells
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
# matches genotype number to genotype name
genonames_matched <- c()
for (G in 1:length(genos)) {
geno <- which(frmts==genos[G])
genoname <- unique(cnts[geno])
if (length(genoname) != 1) stop('\t \t \t \t >>> Error: Check the plate map. Probably same Style used for multiple genotypes.
Look for wells: ', genoname, '\n') # checkpoint
genonames_matched <- c(genonames_matched, genoname)
}
#### import ####
cells <- tidyxl::xlsx_cells(plateMap)
#### get rid of comments ####
# detect row that says 'Comments'
# i.e. xlsx's row (not tibble's row)
comrow <- as.numeric(cells[which(cells$character=='Comments'), 'row'])
if(length(comrow)==0)
stop('\t \t \t \t >>> Error: could not find the row where comments start. Please keep a row that says `Comments` in first column. \n')
# get rid of any row after comment row (including row that says Comments)
cells <- cells %>%
filter(row < comrow)
frmts <- cells$style_format #formats
cnts <- cells$character #contents
#### clean up ####
# keep only wells
# in formats, remove all Normal cells
# actual wells should be genotypeX or empty or excluded
frmts <- frmts[-which(frmts=='Normal')]
# in contents, remove all NA and cells which are a single uppercase letters (they are the row names)
cnts <- cnts[!is.na(cnts)]
cnts <- cnts[! cnts %in% LETTERS]
# we can now detect number of wells in the plate
# check above made sense first
if( length(frmts) != length(cnts) ) stop('\t \t \t \t >>> Error: something wrong when parsing the .xlsx file.
You probably have a genotype Style applied to an empty cell.
Try changing empty cells around the plate map to Cell Styles > Normal \n')
# how many wells?
nwells <- length(cnts)
cat('\t \t \t \t >>> Detected *', nwells, '* -well plate \n')
##### prepare list ####
# how many genotypes are there
if ('empty' %in% frmts | 'excluded' %in% frmts) {
genos <- sort(unique(frmts)[-which(unique(frmts)=='empty' | unique(frmts)=='excluded')])
geno_names <- unique(cnts[!is.na(cnts)])[-which(unique(cnts[!is.na(cnts)])=='empty' | unique(cnts[!is.na(cnts)])=='excluded')]
} else {
genos <- sort(unique(frmts))
geno_names <- unique(cnts[!is.na(cnts)])
}
if (length(genos) != length(geno_names)) stop('\t \t \t \t >>> Error: Not the same number of genotypes and genotype names \n') # checkpoint
# matches genotype number to genotype name
genonames_matched <- c()
for (G in 1:length(genos)) {
geno <- which(frmts==genos[G])
genoname <- unique(cnts[geno])
if (length(genoname) != 1) stop('\t \t \t \t >>> Error: Check the plate map. Probably same Style used for multiple genotypes.
Look for wells: ', paste(genoname, collapse=', '), '\n') # checkpoint
genonames_matched <- c(genonames_matched, genoname)
}
if (setequal(geno_names, genonames_matched) == FALSE) stop('\t \t \t \t >>> Error: Issue with extracting the genotype names. \n') # checkpoint
# what is the genotype with the most number of fish
geno_lgths <- c()
for (G in 1:length(genos)) {
fishes <- sort(which(frmts==genos[G]))
geno_lgths <- c(geno_lgths, length(fishes))
}
maxlgth <- max(geno_lgths)
eachgeno <- matrix(nrow=length(genos), ncol=1) # N in each genotype
for (G in 1:length(genos)){
eachgeno[G,] <- paste('\t genotype', G, '=', genonames_matched[G], ' || N = ', geno_lgths[G])
}
readme_header <- rbind (paste('Experiment: ', experiment_name, sep=''),
paste('Date: ', substr(datebox,1,6), sep=''),
paste('Box: ', substr(datebox, 8, 10), sep=''),
paste('Plate map: ', platemap_name, sep=''),
'',
paste('Total N = ', sum(geno_lgths), ' in ', length(genos), ' genotypes', sep=''),
eachgeno,
'',
paste('Number of empty wells = ', length(which(cnts=='empty')), sep=''),
paste('Number of excluded wells = ', length(which(cnts=='excluded')), sep=''),
'')
pllateMap
plateMap
afterLastSlash(plateMap)
plateMap
afterLastSlash(plateMap)
strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]], 1, 9)
plateMap
plateMap
beforeLastSlash(plateMap)
beforeLastSlash(plateMap)
paste(beforeLastSlash(plateMap))
paste(beforeLastSlash(plateMap), datebox, '_README.txt')
datebox <- substr(strsplit(afterLastSlash(plateMap), split='.xlsx'))[[1]]
datebox <- substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)[[1]]
paste(beforeLastSlash(plateMap), datebox, '_README.txt')
paste0(beforeLastSlash(plateMap), datebox, '_README.txt')
#### build genotype lists ####
Genocols <- vector(mode='list', length=length(genos))
Genotype <- matrix(nrow=maxlgth, ncol=length(genos))
fishcheck <- c()
cat('\n')
for (G in 1:length(genos)) {
fishes <- sort(which(frmts==genos[G]))
message(cat(genos[G], '=', genonames_matched[G], '|| n = ', length(fishes), '|| well ', fishes)) # append to the README file
fishcheck <- c(fishcheck, fishes)
length(fishes) <- maxlgth
Genocols[[G]] <- fishes
Genotype[,G] <- fishes
}
fishcheck <- sort(c(fishcheck, which(frmts=='empty' | frmts=='excluded')))
if (!identical(fishcheck, 1:nwells)) stop('\t \t \t \t >>> Error: Something wrong: not all wells are taken or a well is in multiple genotypes \n') # checkpoint
cat('\n')
cat('Total n =', sum(geno_lgths), '\n')
# say the number of empty wells / excluded wells
cat('Number of empty wells =', length(which(cnts=='empty')), '\n')
cat('Number of excluded wells =', length(which(cnts=='excluded')), '\n')
# Genotype is now a dataframe of `genotypes` columns. Each element = well ID (integer)
# missing headers
# need two header rows: `Genotype1` dummy row and genotype names
# but R does not allow elements in a same column to have different data types
# solution: first create the genotype file, then append the fish IDs to it
header <- rbind(rep('Genotype1', length(genos)), genonames_matched)
rownames(header) <-  NULL
substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx'), 1, 9)
strsplit(afterLastSlash(plateMap), split='.xlsx')
strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]]
substr(strsplit(afterLastSlash(plateMap), split='.xlsx')[[1]], 1, 9)
paste0(beforeLastSlash(plateMap), datebox, 'genotype.txt')
source("~/Dropbox/FramebyFrame/R/genotypeGenerator.R")
plateMap
genotypeGenerator(plateMap='~/Dropbox/phd/utilities/YYMMDD_BX_genotypeMap.xlsx')
library(FramebyFrame)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
library(data.table)
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/paramgrid.pdf")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
library(dplyr)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
library(tibble)
library(tidyr)
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
silent=FALSE,
detailsOrNo=FALSE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
source("~/Dropbox/FramebyFrame/R/LMEstats.R")
## LME stats
LMEreport(paDir="~/Dropbox/ZFAD/220531_SORL1/bhvparams/",
grporder=c('scr', 'sorl1'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
## LME stats with three groups
LMEreport(paDir="~/Dropbox/ZFAD/220316_sorl1Stable/bhvparams/",
grporder=c('wt', 'het', 'hom'),
skipNight0=TRUE,
exportPath="~/Dropbox/ZFAD/tmp/LMEreport.csv")
print("Hello World")
print("Hello World")
c(1, 'hey')
pi
NA
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
